#!/bin/bash
# --------------------------------------------------------
userdefaultselect(){
    while true;do
    countusers=$(awk -F: '{if ($3 >= 1000 && $3 <= 5000) { print $1 } }' /etc/passwd | wc -l)
    
    re="^[1-${countusers}]$"
    i=1
    options=""
    users=$(awk -F: '{if ($3 >= 1000 && $3 <= 5000) { print $1 } }' /etc/passwd)
    for user in ${users}; do
        options+="[$i] $user\n"
        i=$((i+1))
    done

        if [ ${i} -gt 1 ]; then
            showtitle "SELECTING DEFAULT USER"
            showmessage "${txtmsguser2}"
            echo -e "${options}" 
            while true;do
                echo -e "Select one option: "
                read sel
                if ! [[ $sel =~ $re ]] ; then
                    showmessage "${txtinvalid}"
                else
                    codeuser=100$sel
                    codeuser=$((codeuser-1))
                    defaultuser=$(awk -F: '$3 >= 1000 && $3 <= 5000' /etc/passwd | grep $codeuser | awk -F: '{if ($3 >= 1000 && $3 <= 5000) { print $1 }}')
                    homeuserfolder=$(awk -F: '$3 >= 1000 && $3 <= 5000' /etc/passwd | grep $codeuser | awk -F: '{if ($3 >= 1000 && $3 <= 5000) { print $6 }}')
                    echo ""
                    break 
                fi
            done
            break
        else
            showmessage "there are no users other than the root user, you must first create a user.."
            sleep 3
            users
        fi  
    done
}
# --------------------------------------------------------
users(){
    re="^[1-2]$"
    re2=""
    showtitle "${titleusers}"
    
    options=""
    options+="[1] Yes\n"
    options+="[2] No\n"


    showmessage "${txtmsguser}"
    echo -e "${options}"
	
    while true; do
        echo "Select a option: "
        read sel
        if ! [[ $sel =~ $re ]]; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break
        fi
    done
    if [[ $sel == 1 ]]; then
        while true;do
            echo -e "Please enter a new username:"
            read username
            if ! [[ $username =~ $re2 ]]; then
                showmessage "${txtinvalidusername}"
            else
                echo ""
                break
            fi
        done
        showcommand "useradd -d /home/$username -s /bin/bash -m -N $username"
        useradd -d /home/$username -s /bin/bash -m -N $username
        showmessage "User $username created."
        showmessage "Choose a password for $username :"
        showcommand "passwd $username"
        passwd $username
        grpck
        echo ""
        sudousers
        users
    fi
}
# --------------------------------------------------------
sudousers(){
    re="^[1-2]$"
    
    options=""
    options+="[1] Yes\n"
    options+="[2] No\n"


    showmessage "${txtmsgsudouser}"
    echo -e "${options}"
	
    while true; do
        echo "Select a option: "
        read sel
        if ! [[ $sel =~ $re ]]; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break
        fi
    done
    if [[ $sel == 1 ]]; then
        showcommand "echo \"$username ALL=(ALL) ALL\" > /etc/sudoers.d/$username"
        echo "$username ALL=(ALL) ALL" > /etc/sudoers.d/$username
    fi

}
# --------------------------------------------------------
installdependencies(){
    showtitle "INSTALLING DEPENDENCIES"
    installpkgs "${dependencies}"
    installyay
}
# --------------------------------------------------------
enabledmultilib(){
    showtitle "ENABLING MULTILIB REPO"
    showcommand "su sed -i '/\\[multilib\\]/s/^#//g' /etc/pacman.conf"
    showcommand "su sed -i '/\\[multilib\\]/{n;s/^#//g}' /etc/pacman.conf"
    sed -i '/\[multilib\]/s/^#//g' /etc/pacman.conf
    sed -i '/\[multilib\]/{n;s/^#//g}' /etc/pacman.conf
    showcommand "su pacman -Sy"
    pacman -Syu --noconfirm
}
# --------------------------------------------------------
checkaurdependencies(){
    if [ ! -f /usr/bin/automake ]; then
        pacman -S --needed base-devel
    fi
    if [ ! -f /usr/bin/git ]; then
        pacman -S --needed git
    fi
    #if [ ! ${chrootoption} ]; then
    #else
    #fi
    if [ ! $(id -u "aurbuilder") ]; then
        newpass=$(< /dev/urandom tr -dc "@#*%&_A-Z-a-z-0-9" | head -c16)
        showcommand "useradd -r -N -M -d /tmp/aurbuilder -s /usr/bin/nologin aurbuilder"
        showcommand "mkdir /tmp/aurbuilder 1&>/dev/null"
        showcommand "chmod 777 /tmp/aurbuilder"
        useradd -r -N -M -d /tmp/aurbuilder -s /usr/bin/nologin aurbuilder
        echo -e "$newpass\n$newpass\n"|passwd aurbuilder
        newpass=""
        mkdir /tmp/aurbuilder 1&>/dev/null
        chmod 777 /tmp/aurbuilder
    else
        showcommand "mkdir /tmp/aurbuilder 1&>/dev/null"
        showcommand "chmod 777 /tmp/aurbuilder"
        showcommand "usermod -d /tmp/aurbuilder aurbuilder"
        mkdir /tmp/aurbuilder 1&>/dev/null
        chmod 777 /tmp/aurbuilder
        usermod -d /tmp/aurbuilder aurbuilder
    fi
    pressanykey
    if [ ! -f /etc/sudoers.d/aurbuilder ]; then
        showcommand "echo \"aurbuilder ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/aurbuilder"
        showcommand "echo \"root ALL=(aurbuilder) NOPASSWD: ALL\" >> /etc/sudoers.d/aurbuilder"
        echo "aurbuilder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/aurbuilder
        echo "root ALL=(aurbuilder) NOPASSWD: ALL" >> /etc/sudoers.d/aurbuilder
    fi
}
# --------------------------------------------------------
installyay(){
    showtitle "INSTALLING YAY"
    checkaurdependencies
    cd /tmp/aurbuilder
    if [ ! -d /tmp/aurbuilder/yay ]; then
        rm -r /tmp/aurbuilder/yay
    fi
    sudo -u aurbuilder git clone https://aur.archlinux.org/yay.git
    cd yay
    sudo -u aurbuilder makepkg -si --noconfirm
}
# --------------------------------------------------------
installpkgs() {
    if  [ ! "${2}" = ""  ]; then
        showtitle "${2}"
    fi
    if  [ ! "${3}" = ""  ]; then
        showcommand "${3} ${1}"
        $3 $1
    else
        if [ -f /var/lib/pacman/db.lck ]; then
            showcommand "rm /var/lib/pacman/db.lck"
            rm /var/lib/pacman/db.lck
        fi
        showcommand "pacman -S --noconfirm --needed $1"
        pacman -S --noconfirm --needed $1
    fi

}
# --------------------------------------------------------
installaurpkgs() {
    if  [ ! "${2}" = "none"  ]; then
        showtitle "${2}"
    fi
    installpkgsyay "${1}"
}
# --------------------------------------------------------
installpkgsyay(){
    for pkg in ${1}; do
        showcommand "sudo -u aurbuilder yay -S --noconfirm --needed --cleanafter ${pkg}"
        sudo -u aurbuilder yay -S --noconfirm --needed --cleanafter ${pkg}
    done

}
# --------------------------------------------------------
systemctlenable(){
    arr=("$@")
    for service in "${arr[@]}"; do
        showcommand "systemctl enable ${service} -f"
        systemctl enable ${service} -f
    done
}
# --------------------------------------------------------
helpersystemctl(){
	showcommand "systemctl ${1} ${2}"
	systemctl "${1}" "${2}"
}
# --------------------------------------------------------
checkfolder(){
    if [ ! -d ${1} ]; then
        mkdir $1
    fi
}
# --------------------------------------------------------
updatedir(){
    xdg-user-dirs-update
    xdg-user-dirs-update --force
    checkfolder "${homeuserfolder}/.icons"
    checkfolder "${homeuserfolder}/.themes"
}
# --------------------------------------------------------
settingohmyzsh(){
    showcommand "sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\""
    showcommand "git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"
    showcommand "sed -i \"/^#ZSH_THEME=\"robbyrussell\"/ cZSH_THEME=\"powerlevel10k/powerlevel10k\"\" ~/.zshrc"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
}
# --------------------------------------------------------
cloningrepo(){
    showtitle "CLONING REPO"
    showcommand "cd $homeuserfolder"
    cd $homeuserfolder
    if [ ! -d ${localrepopath//%1/$homeuserfolder} ]; then
        showcommand "git clone ${txturlrepo}"
        git clone ${txturlrepo}
    else
        showcommand "cd ${localrepopath//%1/$homeuserfolder}"
        showcommand "git pull origin"
        cd ${localrepopath//%1/$homeuserfolder}
        git pull origin
    fi
    chown -R $defaultuser: ${localrepopath//%1/$homeuserfolder}
}
# --------------------------------------------------------
copydotfiles(){
    showcommand "sudo -u ${defaultuser} cp -a \"${localrepopath//%1/$homeuserfolder}/.config/.\" \"${homeuserfolder}/.config\""
    showcommand "sudo -u ${defaultuser} cp -a \"${localrepopath//%1/$homeuserfolder}/.local/.\" \"${homeuserfolder}/.local\""
    showcommand "sudo -u ${defaultuser} cp \"${localrepopath//%1/$homeuserfolder}/.eslintrc.json\" \"${homeuserfolder}\""
    showcommand "sudo -u ${defaultuser} cp \"${localrepopath//%1/$homeuserfolder}/.zshrc\" \"${homeuserfolder}\""
    showcommand "sudo -u ${defaultuser} cp \"${localrepopath//%1/$homeuserfolder}/.fehbg\" \"${homeuserfolder}\""
    showcommand "sudo -u ${defaultuser} feh --bg-fill \"${localrepopath//%1/$homeuserfolder}/.config/qtile/misc/wallpaper.png"\"

    sudo -u ${defaultuser} cp -a "${localrepopath//%1/$homeuserfolder}/.config/." "${homeuserfolder}/.config/"
    sudo -u ${defaultuser} cp -a "${localrepopath//%1/$homeuserfolder}/.local/." "${homeuserfolder}/.local/"
    sudo -u ${defaultuser} cp "${localrepopath//%1/$homeuserfolder}/.eslintrc.json" "${homeuserfolder}"
    sudo -u ${defaultuser} cp "${localrepopath//%1/$homeuserfolder}/.fehbg" "${homeuserfolder}"
    sudo -u ${defaultuser} cp "${localrepopath//%1/$homeuserfolder}/.zshrc" "${homeuserfolder}"
    sudo -u ${defaultuser} feh --bg-fill "${localrepopath//%1/$homeuserfolder}/.config/qtile/misc/wallpaper.png"

    fc-cache -f
    rm -r "${localrepopath//%1/$homeuserfolder}"

    sed -i "/^#greeter-session=example-gtk-gnome/ cgreeter-session=lightdm-webkit2-greeter" /etc/lightdm/lightdm.conf
    sed -i "/^webkit_theme        = antergos/ cwebkit_theme        = glorious" /etc/lightdm/lightdm-webkit2-greeter.conf
    sed -i "/^debug_mode          = false/ cdebug_mode          = true" /etc/lightdm/lightdm-webkit2-greeter.conf
}
# --------------------------------------------------------
bashalias(){
    showtitle "SETTING ALIAS"
    showcommand "echo \"alias ls='ls --color=auto -l --time-style long-iso'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias l='ls --color=auto -lA --time-style long-iso'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias ll='ls --color=auto -la --time-style long-iso'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias cd..='cd ..'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias ..='cd ..'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias ...='cd ../../'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias ....='cd ../../../'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias .....='cd ../../../../'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias ff='find / -name'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias f='find . -name'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias grep='grep --color=auto'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias egrep='egrep --color=auto'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias fgrep='fgrep --color=auto'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias ip='ip -c'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias pacman='pacman --color auto'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias pactree='pactree --color'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias vdir='vdir --color=auto'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias watch='watch --color'\" >> /etc/profile.d/alias.sh"
    showcommand "echo \"alias yay='sudo -u aurbuilder yay'\" >> /etc/profile.d/alias.sh"

    echo "alias ls='ls --color=auto -l --time-style long-iso'" >> /etc/profile.d/alias.sh
    echo "alias l='ls --color=auto -lA --time-style long-iso'" >> /etc/profile.d/alias.sh
    echo "alias ll='ls --color=auto -la --time-style long-iso'" >> /etc/profile.d/alias.sh
    echo "alias cd..='cd ..'" >> /etc/profile.d/alias.sh
    echo "alias ..='cd ..'" >> /etc/profile.d/alias.sh
    echo "alias ...='cd ../../'" >> /etc/profile.d/alias.sh
    echo "alias ....='cd ../../../'" >> /etc/profile.d/alias.sh
    echo "alias .....='cd ../../../../'" >> /etc/profile.d/alias.sh
    echo "alias ff='find / -name'" >> /etc/profile.d/alias.sh
    echo "alias f='find . -name'" >> /etc/profile.d/alias.sh
    echo "alias grep='grep --color=auto'" >> /etc/profile.d/alias.sh
    echo "alias egrep='egrep --color=auto'" >> /etc/profile.d/alias.sh
    echo "alias fgrep='fgrep --color=auto'" >> /etc/profile.d/alias.sh
    echo "alias ip='ip -c'" >> /etc/profile.d/alias.sh
    echo "alias pacman='pacman --color auto'" >> /etc/profile.d/alias.sh
    echo "alias pactree='pactree --color'" >> /etc/profile.d/alias.sh
    echo "alias vdir='vdir --color=auto'" >> /etc/profile.d/alias.sh
    echo "alias watch='watch --color'" >> /etc/profile.d/alias.sh
    #man
    echo 'man() {' >> /etc/profile.d/alias.sh
    echo '	env \' >> /etc/profile.d/alias.sh
    echo '		LESS_TERMCAP_mb=$(printf "\e[1;31m") \' >> /etc/profile.d/alias.sh
    echo '		LESS_TERMCAP_md=$(printf "\e[1;31m") \' >> /etc/profile.d/alias.sh
    echo '		LESS_TERMCAP_me=$(printf "\e[0m") \' >> /etc/profile.d/alias.sh
    echo '		LESS_TERMCAP_se=$(printf "\e[0m") \' >> /etc/profile.d/alias.sh
    echo '		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \' >> /etc/profile.d/alias.sh
    echo '		LESS_TERMCAP_ue=$(printf "\e[0m") \' >> /etc/profile.d/alias.sh
    echo '		LESS_TERMCAP_us=$(printf "\e[1;32m") \' >> /etc/profile.d/alias.sh
    echo '			man "$@"' >> /etc/profile.d/alias.sh
    echo '}' >> /etc/profile.d/alias.sh
    #yay
    echo "alias yay='sudo -u aurbuilder yay'" >> /etc/profile.d/alias.sh
}
# --------------------------------------------------------
editor(){
    showtitle "SETTING EDITOR"
    if [ "$editor" = "unset" ]; then
        showcommand "rm /etc/profile.d/editor.sh"
        rm /etc/profile.d/editor.sh
    else
        showcommand "echo \"export EDITOR=$editor\" > /etc/profile.d/editor.sh"
        showcommand "chmod 755 /etc/profile.d/editor.sh"
        showcommand "export EDITOR=$editor"
        echo "export EDITOR=$editor" > /etc/profile.d/editor.sh
        chmod 755 /etc/profile.d/editor.sh
        export EDITOR=$editor
    fi
}
# --------------------------------------------------------
run(){
    loadstrings
    userdefaultselect
    showcommand "df -h"
    enabledmultilib
    installdependencies
    showcommand "df -h"

    # xfce -----------------------------------------
    installpkgs "${pkgs_xfce}" "${titlexfce}"
    systemctlenable "${services_xfce}"
    helpersystemctl "set-default" "graphical.target"
    updatedir

    # sound ----------------------------------------
    installpkgs "${pkgs_sound}" "${titlesound}"
 
    # printer --------------------------------------
    installpkgs "${pkgs_printer}" "${titleprinter}"
    systemctlenable "${services_printer}"

    # console --------------------------------------
    installpkgs "${pkgs_console}" "${titleconsole}"
 
    # compression tools ----------------------------
    installpkgs "${pkgs_compressiontools}" "${titlecompressiontools}"
 
    # services ------------------------------------
    installpkgs "${pkgs_services}" "${titleservices}"
    systemctlenable "${services_services[@]}"
 
    # file system extras ---------------------------
    installpkgs "${pkgs_filesystemextras}" "${titlefilesystemextras}"
 
    # general packages -----------------------------
    installpkgs "${pkgs_generalpackages}" "${titlegeneralpackages}"

    # aur packages ---------------------------------
    installaurpkgs "${pkgs_aurpackages}" "${titleaurpackages}"
    
    # dotfiles -------------------------------------
    installpkgs "${pkgs_pip_vim}" "${titlesvim} PIP DEPENDENCIES" "${command_pip_vim//%1/$defaultuser}"
    checkfolder "${npm_install_folder//%1/$defaultuser}"
    installpkgs "${pkgs_npm_vim}" "${titlesvim} NPM DEPENDENCIES" "${command_npm_vim//%1/$defaultuser} ${prefix//%1/$homeuserfolder}"
    cloningrepo
    copydotfiles

    # bash -----------------------------------------
    bashalias

    # editor ---------------------------------------
    editor 

    # oh-my-zsh ------------------------------------
    #settingohmyzsh
}
# --------------------------------------------------------
pressanykey(){
    tput setaf 3
	read -n1 -p "${txtpressanykey}"
	echo ""
	tput sgr0
}
showcommand(){
    tput setaf 2
    if [ ! "${1}" = "none" ]; then
        echo -e "${txtcommand//%1/${1}}"
        echo ""
    fi
    tput sgr0
}
showmessage(){
    tput setaf 6
    if [ ! "${1}" = "none" ]; then
        echo -e "${txtmessage//%1/${1}}"
        echo ""
    fi
    tput sgr0
}
showtitle(){
    tput setaf 5
    if [ ! "${1}" = "none" ]; then
    echo ""
    echo "##############################################"
    echo "${1}"
    echo "##############################################"
    echo ""
    fi
    tput sgr0
}
# --------------------------------------------------------
loadstrings(){
    # users ----------------------------------------
    titleusers="USERS MENU"
    txtmsguser="Do you want add a new user?"
    txtmsguser2="Select a default user for the dotfiles installation"
    txtuser="%1 User"
    txtusers="%1 Users"
    txtinvalidusername="Invalid username, try again."
    defaultuser=""
    homeuserfolder=""

    # dependencias ---------------------------------
    dependencies="neovim git curl wget base base-devel pacman-contrib sudo"
	
    # xfce -----------------------------------------
    titlexfce="INSTALLING XFCE4"
    pkgs_xfce="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings xfce4 xfce4-goodies xdg-user-dirs xdg-user-dirs-gtk"
    services_xfce=("lightdm")
	
    # sound ----------------------------------------
    titlesound="INSTALLING SOUND"
    pkgs_sound="pulseaudio pulseaudio-alsa pavucontrol alsa-utils alsa-plugins alsa-lib alsa-firmware gstreamer gst-plugins-good gst-plugins-bad gst-plugins-base gst-plugins-ugly volumeicon playerctl"
	
    # printer --------------------------------------
    titleprinter="INSTALLING PRINTER"
    pkgs_printer="cups cups-pdf ghostscript gsfonts gutenprint gtk3-print-backends libcups hplip system-config-printer"
    services_printer=("cups")
	
    # console --------------------------------------
    titleconsole="INSTALLING CONSOLE"
    pkgs_console="pacman-contrib base-devel bash-completion usbutils dmidecode dialog gpm"
	
    # compression tools ----------------------------
    titlecompressiontools="INSTALLING COMPRESION TOOLS"
    pkgs_compressiontools="zip unzip unrar p7zip lzop"
    
	# services -------------------------------------
    titleservices="INSTALLING SERVICES PACKAGES"
    pkgs_services="networkmanager openssh cronie haveged intel-ucode"
    services_services=("NetworkManager" "sshd" "cronie" "haveged")

    # file system extras ---------------------------
    titlefilesystemextras="INSTALLING FILE SYSTEM EXTRAS"
    pkgs_filesystemextras="dosfstools ntfs-3g btrfs-progs exfat-utils gptfdisk autofs fuse2 fuse3 fuseiso"
    
    # general packages -----------------------------
    titlegeneralpackages="INSTALLING GENERAL PACKAGES"
    pkgs_generalpackages="alacritty ctags dmenu dunst feh firefox flameshot font-bh-ttf gifsicle gsfonts gvfs gvfs-nfs gvfs-mtp gvfs-smb hunspell hunspell-es_ve hyphen hyphen-es kolourpaint languagetool libreoffice-fresh lightdm-webkit2-greeter mpc mpd mpv mythes-es ncmpcpp nodejs npm pamixer python-pip python-neovim qbittorrent qtile ranger redshift sdl_ttf tig ttf-bitstream-vera ttf-dejavu ttf-liberation ueberzug udiskie xcb-util-cursor xorg-fonts-type1 zsh zsh-autosuggestions zsh-completions zsh-lovers"

    # aur packages ---------------------------------
    titleaurpackages="INSTALLING AUR PACKAGES"
    pkgs_aurpackages="aic94xx-firmware bashmount discord_arch_electron google-chrome jdownloader2 lightdm-webkit2-theme-glorious megasync minecraft-launcher nvidia-390xx-dkms nvidia-390xx-settings nvidia-390xx-utils opencl-nvidia-390xx picom-ibhagwan-git runelite-launcher telegram-desktop-bin ttf-ms-fonts ventoy-bin visual-studio-code-bin wd719x-firmware zoom"

    # dotfiles ------------------------------------
    localrepopath="%1/dotfiles"
    txturlrepo="-b dev --single-branch https://github.com/GiomarOsorio/dotfiles.git"

    # setup vim ------------------------------------
    titlesvim="SETTING UP VIM"
    command_pip_vim="sudo -u %1 pip install"
    pkgs_pip_vim="virtualenv pynvim python-language-server flake8 pylint black jedi"
    prefix="--prefix %1"
    command_npm_vim="sudo -u %1 npm install"
    pkgs_npm_vim="neovim eslint eslint-config-airbnb-base"
     
    # editor ---------------------------------------
    editor="nvim"

    # messages -------------------------------------
    txtpressanykey="Press any key to continue..."
    txtcommand="> %1"
    txtmessage="%1"
    txtinvalid="Invalid option, try again."
}
# --------------------------------------------------------
workflow="false"
while (( "$#" )); do
  case $1 in
        --chroot)
            chrootoption="true"
        ;;
        --workflow)
            workflow="true"
        ;;
  esac
  shift
done
echo -e "${workflow}"
read -n1
run
