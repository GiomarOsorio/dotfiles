#!/bin/bash
# --------------------------------------------------------
installdependencies(){
    showtitle "INSTALLING DEPENDENCIES"
    installpkgs "${dependencies}"
    installyay
    cloningrepo
}
# --------------------------------------------------------
enabledmultilib(){
    showtitle "ENABLING MULTILIB REPO"
    showcommand "su sed -i '/\\[multilib\\]/s/^#//g' /etc/pacman.conf"
    showcommand "su sed -i '/\\[multilib\\]/{n;s/^#//g}' /etc/pacman.conf"
    sed -i '/\[multilib\]/s/^#//g' /etc/pacman.conf
    sed -i '/\[multilib\]/{n;s/^#//g}' /etc/pacman.conf
    showcommand "su pacman -Sy"
    pacman -Sy
}
# --------------------------------------------------------
users(){
    re="^[1-2]$"
    re2=""
    showtitle "${titleusers}"
    
    options=""
    options+="[1] Yes\n"
    options+="[2] No\n"


    showmessage "${txtmsguser}"
    echo -e "${options}"
	
    while true; do
        echo "Select a option: "
        read sel
        if ! [[ $sel =~ $re ]]; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break
        fi
    done
    if [[ $sel == 1 ]]; then
        while true;do
            echo -e "Please enter a new username:"
            read username
            if ! [[ $username =~ $re2 ]]; then
                showmessage "${txtinvalidusername}"
            else
                echo ""
                break
            fi
        done
        showcommand "useradd -d /home/$username -s /bin/bash -m -N $username"
        useradd -d /home/$username -s /bin/bash -m -N $username
        showmessage "User $username created."
        showmessage "Choose a password for $username :"
        showcommand "passwd $username"
        passwd $username
        grpck
        echo ""
        sudousers
        users
    fi

}
# --------------------------------------------------------
sudousers(){
    re="^[1-2]$"
    
    options=""
    options+="[1] Yes\n"
    options+="[2] No\n"


    showmessage "${txtmsgsudouser}"
    echo -e "${options}"
	
    while true; do
        echo "Select a option: "
        read sel
        if ! [[ $sel =~ $re ]]; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break
        fi
    done
    if [[ $sel == 1 ]]; then
        showcommand "echo \"$username ALL=(ALL) ALL\" > /etc/sudoers.d/$username"
        echo "$username ALL=(ALL) ALL" > /etc/sudoers.d/$username
    fi

}
# --------------------------------------------------------
checkaurdependencies(){
    if [ ! -f /usr/bin/automake ]; then
        pacman -S --needed base-devel
    fi
    if [ ! -f /usr/bin/git ]; then
        pacman -S --needed git
    fi
    if [ ! $(id -u "aurbuilder") ]; then
        newpass=$(< /dev/urandom tr -dc "@#*%&_A-Z-a-z-0-9" | head -c16)
        showcommand "useradd -r -N -M -d /tmp/aurbuilder -s /usr/bin/nologin aurbuilder"
        showcommand "echo -e \"$newpass\n$newpass\n\"|passwd aurbuilder"
        showcommand "mkdir /tmp/aurbuilder 1&>/dev/null"
        showcommand "chmod 777 /tmp/aurbuilder"
        useradd -r -N -M -d /tmp/aurbuilder -s /usr/bin/nologin aurbuilder
        echo -e "$newpass\n$newpass\n"|passwd aurbuilder
        newpass=""
        mkdir /tmp/aurbuilder 1&>/dev/null
        chmod 777 /tmp/aurbuilder
    else
        showcommand "mkdir /tmp/aurbuilder 1&>/dev/null"
        showcommand "chmod 777 /tmp/aurbuilder"
        showcommand "usermod -d /tmp/aurbuilder aurbuilder"
        mkdir /tmp/aurbuilder 1&>/dev/null
        chmod 777 /tmp/aurbuilder
        usermod -d /tmp/aurbuilder aurbuilder
    fi
    if [ ! -f /etc/sudoers.d/aurbuilder ]; then
        showcommand "echo \"aurbuilder ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/aurbuilder"
        showcommand "echo \"root ALL=(aurbuilder) NOPASSWD: ALL\" >> /etc/sudoers.d/aurbuilder"
        echo "aurbuilder ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/aurbuilder
        echo "root ALL=(aurbuilder) NOPASSWD: ALL" >> /etc/sudoers.d/aurbuilder
    fi
}
# --------------------------------------------------------
installyay(){
    showtitle "INSTALLING YAY"
    checkaurdependencies
    cd /tmp/aurbuilder
    if [ ! -f /tmp/aurbuilder/yay ]; then
        rm -r /tmp/aurbuilder/yay
    fi
    sudo -u aurbuilder git clone https://aur.archlinux.org/yay.git
    cd yay
    sudo -u aurbuilder makepkg -si --noconfirm
}
# --------------------------------------------------------
installpkgs() {
    if  [ ! "${2}" = ""  ]; then
        showtitle "${2}"
    fi
    if  [ ! "${3}" = ""  ]; then
        showcommand "${3} ${1}"
        $3 $1
    else
        if [ -f /var/lib/pacman/db.lck ]; then
            showcommand "rm /var/lib/pacman/db.lck"
            rm /var/lib/pacman/db.lck
        fi
        showcommand "pacman -S --noconfirm --needed $1"
        pacman -S --noconfirm --needed $1
    fi
    echo ""
}
# --------------------------------------------------------
installaurpkgs() {
    if  [ ! "${2}" = "none"  ]; then
        showtitle "${2}"
    fi
    showcommand "su -u aurbuilder yay -S --needed $2"
    su -u aurbuilder yay -S --needed $1
}
# --------------------------------------------------------
systemctlenable(){
    arr=("$@")
    for service in "${arr[@]}"; do   # The quotes are necessary here
        showcommand "systemctl enable ${service} -f"
        systemctl enable ${service} -f
    done
}
# --------------------------------------------------------
helpersystemctl(){
	showcommand "systemctl ${1} ${2}"
	systemctl "${1}" "${2}"
}
# --------------------------------------------------------
updatedir(){
    xdg-user-dirs-update
    xdg-user-dirs-update --force
    [ -d $HOME"/.icons" ] || mkdir -p $HOME"/.icons"
    [ -d $HOME"/.themes" ] || mkdir -p $HOME"/.themes"
    [ -d $HOME"/.fonts" ] || mkdir -p $HOME"/.fonts"
}
# --------------------------------------------------------
copy(){
    if  [  \( ! "${1}" = "none" \)  -a  \( ! "${2}" = "none" \) ]; then
        cp -vf "${1}" "${2}"
    fi 
}
# --------------------------------------------------------
run(){
    loadstrings
    installdependencies
    enabledmultilib
    #checkaurdependencies

    # users ----------------------------------------
    users

    # xfce -----------------------------------------
    installpkgs "${pkgs_xfce}" "${titlexfce}"
    systemctlenable "${services_xfce}"
    helpersystemctl "set-default" "graphical.target"
    updatedir
	
    # sound ----------------------------------------
    installpkgs "${pkgs_sound}" "${titlesound}"
	
    # printer --------------------------------------
    installpkgs "${pkgs_printer}" "${titleprinter}"
    systemctlenable "${services_printer}"
	
    # console --------------------------------------
    installpkgs "${pkgs_console}" "${titleconsole}"
	
    # compression tools ----------------------------
    installpkgs "${pkgs_compressiontools}" "${titlecompressiontools}"
	
    # services ------------------------------------
    installpkgs "${pkgs_services}" "${titleservices}"
    systemctlenable "${services_services[@]}"
	
    # file system extras ---------------------------
    installpkgs "${pkgs_filesystemextras}" "${titlefilesystemextras}"
	
    # general packages -----------------------------
    installpkgs "${pkgs_generalpackages}" "${titlegeneralpackages}"
	
    # aur packages ---------------------------------
    #installaurpkgs "${pkgs_aurpackages}" "${titleaurpackages}"
    
    # setup vim ------------------------------------
    installpkgs "${pkgs_pip_vim}" "${titlesvim} PIP DEPENDENCIES" "${command_pip_vim}"
    installpkgs "${pkgs_npm_vim}" "${titlesvim} NPM DEPENDENCIES" "${command_npm_vim}"
    copy "~/dotfiles/.config/nvim" "~/.config/"
    copy "~/dotfiles/.eslintrc.json" "~"
    
    # setup qtile ----------------------------------
    copy "~/dotfiles/.config/qtile" "~/.config/"

    # setup ranger ----------------------------------
    copy "~/dotfiles/.config/ranger" "~/.config/"
}
# --------------------------------------------------------
showcommand(){
    tput setaf 2
    if [ ! "${1}" = "none" ]; then
        echo -e "${txtcommand//%1/${1}}"
    fi
    tput sgr0
}
showmessage(){
    tput setaf 6
    if [ ! "${1}" = "none" ]; then
        echo -e "${txtmessage//%1/${1}}"
    fi
    tput sgr0
}
showtitle(){
    tput setaf 5
    echo "##############################################"
    echo "${1}"
    echo "##############################################"
    echo ""
    tput sgr0
}
# --------------------------------------------------------
loadstrings(){
    # repo -----------------------------------------
    txturlrepo="https://github.com/GiomarOsorio/dotfiles.git"

    # dependencias ---------------------------------
    dependencies="neovim git curl wget base base-devel pacman-contrib sudo"
	
    # users ----------------------------------------
    titleusers="USERS MENU"
    txtmsguser="Do you want add a new user?"
    txtuser="%1 User"
    txtusers="%1 Users"
    txtinvalidusername="Invalid username, try again."

    # sudousers ----------------------------------------
    txtmsgsudouser="Do you want add the last user create to sudo group?"

    # xfce -----------------------------------------
    titlexfce="INSTALLING XFCE4"
    pkgs_xfce="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings xfce4 xfce4-goodies xdg-user-dirs xdg-user-dirs-gtk"
    services_xfce=("lightdm")
	
    # sound ----------------------------------------
    titlesound="INSTALLING SOUND"
    pkgs_sound="pulseaudio pulseaudio-alsa pavucontrol alsa-utils alsa-plugins alsa-lib alsa-firmware gstreamer gst-plugins-good gst-plugins-bad gst-plugins-base gst-plugins-ugly volumeicon playerctl"
	
    # printer --------------------------------------
    titleprinter="INSTALLING PRINTER"
    pkgs_printer="cups cups-pdf ghostscript gsfonts gutenprint gtk3-print-backends libcups hplip system-config-printer"
    services_printer=("cups")
	
    # console --------------------------------------
    titleconsole="INSTALLING CONSOLE"
    pkgs_console="pacman-contrib base-devel bash-completion usbutils dmidecode dialog gpm"
	
    # compression tools ----------------------------
    titlecompressiontools="INSTALLING COMPRESION TOOLS"
    pkgs_compressiontools="zip unzip unrar p7zip lzop"
    
	# services -------------------------------------
    titleservices="INSTALLING SERVICES PACKAGES"
    pkgs_services="networkmanager openssh cronie haveged intel-ucode"
    services_services=("NetworkManager" "sshd" "cronie" "haveged")

    # file system extras ---------------------------
    titlefilesystemextras="INSTALLING FILE SYSTEM EXTRAS"
    pkgs_filesystemextras="dosfstools ntfs-3g btrfs-progs exfat-utils gptfdisk autofs fuse2 fuse3 fuseiso"
    
    # general packages -----------------------------
    titlegeneralpackages="INSTALLING GENERAL PACKAGES"
    pkgs_generalpackages="alacritty ctags dunst firefox flameshot font-bh-ttf gsfonts hunspell hunspell-es_ve hyphen hyphen-es kolourpaint languagetool libreoffice-fresh mpv mythes-es ncmpcpp nodejs npm picom python-pip python-neovim qbittorrent qtile ranger redshift sdl_ttf tig ttf-bitstream-vera ttf-dejavu ttf-liberation udiskie xorg-fonts-type1 zsh zsh-autosuggestions zsh-completions zsh-lovers"

    # aur packages ---------------------------------
    titleaurpackages="INSTALLING AUR PACKAGES"
    pkgs_aurpackages="aic94xx-firmware bashmount discord_arch_electron google-chrome jwnloader2 megasync minecraft-launcher nerd-fonts-ubuntu-mono nvidia-390xx-dkms nvidia-390xx-settings nvidia-390xx-utils opencl-nvidia-390xx runelite-launcher ttf-ms-fonts ventoy-bin visual-studio-code-bin wd719x-firmware zoom"

    # setup vim ------------------------------------
    titlesvim="SETTING UP VIM"
    command_pip_vim="pip install"
    pkgs_pip_vim="virtualenv pynvim python-language-server flake8 pylint black jedi"
    command_npm_vim="npm install"
    pkgs_npm_vim="neovim eslint eslint-config-airbnb-base --save-dev"	
     
    # messages -------------------------------------
    txtpressanykey="Press any key to continue..."
    txtcommand="> %1 \n"
    txtmessage="%1\n"
    txtinvalid="Invalid option, try again."
}
# --------------------------------------------------------
while (( "$#" )); do
  case $1 in
    -i|--install) install
                  exit 0;;
    --chroot) chrootoption="true";;
  esac
  shift
done
run
