!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
ACME_SCRIPT_DIR	settings.py	/^ACME_SCRIPT_DIR = os.path.expanduser('~\/Personal\/acme-corp\/scripts\/')$/;"	v
ALERT	settings.py	/^ALERT = COLS['red_1']$/;"	v
ALT	settings.py	/^ALT = "mod1"    # Left Alt$/;"	v
Adding qtile to the desktop list	README.md	/^### Adding qtile to the desktop list$/;"	S
BORDER_FOCUS	layouts.py	/^BORDER_FOCUS = COLS["red_1"]$/;"	v
BORDER_NORMAL	layouts.py	/^BORDER_NORMAL = COLS["dark_2"]$/;"	v
BORDER_WIDTH	layouts.py	/^BORDER_WIDTH = 3$/;"	v
COLS	settings.py	/^COLS = {$/;"	v
DIRECTIONS	settings.py	/^DIRECTIONS = ("Left", "Down", "Up", "Right")$/;"	v
FONT	settings.py	/^FONT = 'Hurmit NF Medium'$/;"	v
FONTSIZE	settings.py	/^FONTSIZE = 15$/;"	v
FONT_PARAMS	settings.py	/^FONT_PARAMS = {$/;"	v
FOREGROUND	settings.py	/^FOREGROUND = COLS['light_3']$/;"	v
Installing qtile	README.md	/^### Installing qtile$/;"	S
K_LAYOUTS	settings.py	/^K_LAYOUTS = ['us','es']$/;"	v
MARGIN	layouts.py	/^MARGIN = 10$/;"	v
MOD	settings.py	/^MOD = "mod4"    # Windows\/Super$/;"	v
My qtile config	README.md	/^My qtile config$/;"	c
PADDING	settings.py	/^PADDING = 2$/;"	v
R_ALT	settings.py	/^R_ALT = "mod3"  # Right Alt$/;"	v
SCRIPT_DIR	settings.py	/^SCRIPT_DIR = os.path.expanduser('~\/.config\/qtile\/misc\/')$/;"	v
Setting up qtile	README.md	/^# Setting up qtile$/;"	c
ShellScript	widgets.py	/^class ShellScript(base.ThreadedPollText):$/;"	c
TERMINAL	settings.py	/^TERMINAL = "alacritty"$/;"	v
WITH_SYS_TRAY	settings.py	/^WITH_SYS_TRAY = True$/;"	v
__init__	widgets.py	/^    def __init__(self, **config):$/;"	m	class:ShellScript
_run_script	widgets.py	/^    def _run_script(self, btn=None, x=None, y=None):$/;"	m	class:ShellScript
_separator	config.py	/^    def _separator():$/;"	f	function:make_screen	file:
auto_fullscreen	config.py	/^auto_fullscreen = True$/;"	v
auto_fullscreen	themes/config.py	/^auto_fullscreen = True$/;"	v
autostart	config.py	/^def autostart():$/;"	f
bring_front_click	config.py	/^bring_front_click = False$/;"	v
bring_front_click	themes/config.py	/^bring_front_click = False$/;"	v
button_press	widgets.py	/^    def button_press(self, x, y, button):$/;"	m	class:ShellScript
colors	themes/config.py	/^colors = [$/;"	v
cursor_warp	config.py	/^cursor_warp = False $/;"	v
cursor_warp	themes/config.py	/^cursor_warp = False$/;"	v
defaults	widgets.py	/^    defaults = [$/;"	v	class:ShellScript
dgroups_app_rules	config.py	/^dgroups_app_rules = []$/;"	v
dgroups_app_rules	themes/config.py	/^dgroups_app_rules = []  # type: List$/;"	v
dgroups_key_binder	config.py	/^dgroups_key_binder = None$/;"	v
dgroups_key_binder	themes/config.py	/^dgroups_key_binder = None$/;"	v
extension_defaults	themes/config.py	/^extension_defaults = widget_defaults.copy()$/;"	v
ez_keys	helpers.py	/^def ez_keys(key_bindings):$/;"	f
floating_layout	layouts.py	/^floating_layout = layout.Floating($/;"	v
floating_layout	themes/config.py	/^floating_layout = layout.Floating($/;"	v
focus_on_window_activation	config.py	/^focus_on_window_activation = "smart"$/;"	v
focus_on_window_activation	themes/config.py	/^focus_on_window_activation = "smart"$/;"	v
follow_mouse_focus	config.py	/^follow_mouse_focus = True$/;"	v
follow_mouse_focus	themes/config.py	/^follow_mouse_focus = True$/;"	v
group_names	themes/config.py	/^group_names = [$/;"	v
groups	groups.py	/^groups = [$/;"	v
groups	themes/config.py	/^groups = [Group(name, **kwargs) for name, kwargs in group_names]$/;"	v
init_scratchpad_on_new	config.py	/^def init_scratchpad_on_new(window):$/;"	f
init_screens	themes/config.py	/^def init_screens():$/;"	f
init_widgets_list	themes/config.py	/^def init_widgets_list():$/;"	f
init_widgets_screen	themes/config.py	/^def init_widgets_screen():$/;"	f
is_running	misc/autostart.sh	/^is_running() {$/;"	f
keys	bindings.py	/^keys = [Key(k[0], k[1], k[2]) for k in [$/;"	v
keys	themes/config.py	/^keys = [$/;"	v
layout_theme	themes/config.py	/^layout_theme = {$/;"	v
layouts	layouts.py	/^layouts = [$/;"	v
layouts	themes/config.py	/^layouts = [$/;"	v
main	config.py	/^def main(qtile):$/;"	f
main	themes/config.py	/^main = None$/;"	v
make_screen	config.py	/^def make_screen(systray=False):$/;"	f
mod	themes/config.py	/^mod = "mod4"  # Sets mod key to SUPER\/WINDOWS$/;"	v
mouse	bindings.py	/^mouse = [$/;"	v
mouse	themes/config.py	/^mouse = [$/;"	v
myConfig	themes/config.py	/^myConfig = "\/home\/dt\/.config\/qtile\/config.py"  # The Qtile config file location$/;"	v
myTerm	themes/config.py	/^myTerm = "alacritty"  # My terminal of choice$/;"	v
notify	helpers.py	/^def notify(msg):$/;"	f
orientations	widgets.py	/^    orientations = base.ORIENTATION_HORIZONTAL$/;"	v	class:ShellScript
poll	helpers.py	/^    def poll():$/;"	f	function:poll_func	file:
poll	widgets.py	/^    def poll(self):$/;"	m	class:ShellScript
poll_func	helpers.py	/^def poll_func(script_name):$/;"	f
prompt	themes/config.py	/^prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())$/;"	v
python.formatting.provider	.vim/coc-settings.json	/^  "python.formatting.provider": "autopep8"$/;"	s
remove_scratchpad_on_group_change	config.py	/^def remove_scratchpad_on_group_change():$/;"	f
restart_on_randr	config.py	/^def restart_on_randr(qtile, ev):$/;"	f
run	helpers.py	/^def run(cmd, with_output=False):$/;"	f
run_script	helpers.py	/^def run_script(fname, with_output=False):$/;"	f
screens	config.py	/^screens = [make_screen(systray=WITH_SYS_TRAY)]$/;"	v
screens	themes/config.py	/^    screens = init_screens()$/;"	v
script	helpers.py	/^def script(fname):$/;"	f
show_scratchpad	bindings.py	/^def show_scratchpad(qtile):$/;"	f
start_once	themes/config.py	/^def start_once():$/;"	f
to_scratchpad	bindings.py	/^def to_scratchpad(window):$/;"	f
toggle_klayout	bindings.py	/^def toggle_klayout(qtile):$/;"	f
wallpaper	helpers.py	/^def wallpaper(fname):$/;"	f
widget_defaults	themes/config.py	/^widget_defaults = dict(font="Ubuntu Mono", fontsize=12, padding=2, background=colors[2])$/;"	v
widgets_list	themes/config.py	/^    widgets_list = init_widgets_list()$/;"	v
widgets_screen	themes/config.py	/^    widgets_screen = init_widgets_screen()$/;"	v
window_to_next_group	themes/config.py	/^def window_to_next_group(qtile):$/;"	f
window_to_prev_group	themes/config.py	/^def window_to_prev_group(qtile):$/;"	f
wmname	config.py	/^wmname = "LG3D"$/;"	v
wmname	themes/config.py	/^wmname = "LG3D"$/;"	v
