#!/bin/bash
# --------------------------------------------------------
run(){
    installdependencies
    loadconfigs
    checkefi
    setkeymap
    chooseeditor
    selectdisk "${title_device}" "${menu_device}"
    device="${sel_device}"
    selectswapsize
    diskpart
    formatdevice
    mountparts
    installmenu
    archmenu
    exit
}
# --------------------------------------------------------
installdependencies(){
    clear
	showtitle "INSTALLING DEPENDENCIES"
    showcommand "pacman -S --noconfirm --needed arch-install-scripts wget libnewt"
    pacman -S --noconfirm --needed arch-install-scripts wget libnewt
    clear
}
# --------------------------------------------------------
checkefi(){
	showtitle "CHECKING EFI"
    showcommand "dmesg | grep efi: > /dev/null"
    dmesg | grep efi: > /dev/null
    if [ "$?" == "1" ]; then
        if [ "${eficomputer}" != "1" ]; then
            eficomputer=0
        fi
    else
        eficomputer=1
    fi
}
# --------------------------------------------------------
setkeymap(){
    showtitle "LOADING KEYMAP"
    showcommand "loadkeys ${keymap}"
    loadkeys $keymap
}

# --------------------------------------------------------
chooseeditor(){
    showtitle "SETTING EDITOR"
    showcommand "export EDITOR=${editor}"
    export EDITOR=${editor}
    EDITOR=${editor}
}

# --------------------------------------------------------
selectdisk(){
	showtitle "SELECTING HARD DISK"
    if  [ ! "${1}" = "none"  ]; then
        showmessage "${1}"
    fi
    if  [ ! "${2}" = "none"  ]; then
        showmessage "${2}"
    fi
    showmessage "${txtnextscreen//%1/hard drive}"

    items=$(lsblk -d -p -n -l -o NAME,SIZE -e 7,11)
    sel_device=""
    options=()
    IFS_ORIG=$IFS
    IFS=$'\n'
    for item in ${items}
    do  
        options+=("${item}" "")
    done
    IFS=$IFS_ORIG

	pressanykey
    sel_device=$(whiptail --backtitle "" --title "${1}" --menu "" 0 0 0 "${options[@]}" 3>&1 1>&2 2>&3);
    if [ "${sel_device}" == "" ]; then
        clear
        showmessage "you did not select any hard drive, exiting the installer..."
        pressanykey
        unmountdevices
        exit
    fi
    clear
    sel_device=${sel_device%%\ *}
    showmessage "have selected ${sel_device}"
}
# --------------------------------------------------------
selectswapsize(){
    showtitle "SELECTING SWAP SIZE"
    showmessage "${txt_swap}"
    showmessage "${txtnextscreen//%1/swap}"
    pressanykey
    swap_size=$(whiptail --backtitle "" --inputbox "${menu_swap}" 8 39 ${default_swapsize} --title "${title_swap}" 3>&1 1>&2 2>&3)
    clear
    [[ $swap_size =~ ^[0-9]+$ ]] || swap_size=$default_swapsize
    showcommand "have selected "${swap_size%%\ *}"MB in swap size"
}
# --------------------------------------------------------
diskpart(){
    re='^[1-2]$'
    showtitle "PARTIATING DEVICE"
    options="[1] Auto Partition (dos)\n"
    options+="[2] Auto Partition (gpt)\n"
    if [ "${eficomputer}" == "1" ]; then
    	re='^[1-3]$'
        options+="[3] Auto Partition (gpt,efi)\n"
    fi
    echo -e "${txt_diskpart}"
    echo -e "${options}"
    while true;do
        echo -e "Select one option: "
        read partitiontable
        if ! [[ $partitiontable =~ $re ]] ; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break 
        fi
    done
    case ${partitiontable} in
        "1")
            #"[1] Auto Partition (dos)\n"
            diskpartautodos
        ;;
        "2")
            #"[2] Auto Partition (gpt)\n"
            diskpartautogpt
        ;;
        "3")
            #"[3] Auto Partition (gpt,efi)\n"
            diskpartautogptefi
        ;;
    esac
    if [ "${bootdev::8}" == "/dev/nvm" ]; then
	    isnvme=1
    fi
    if [ "${bootdev::8}" == "/dev/nvm" ]; then
	    isnvme=1
    fi
}
# --------------------------------------------------------
diskpartautodos(){
    showmessage "${txtautopartclear}"
    parted ${device} mklabel msdos
    sleep 1
    showmessage "${txtautopartcreate//%1/boot}"
    echo -e "n\np\n\n\n+512M\na\nw" | fdisk ${device}
    sleep 1
    showmessage "${txtautopartcreate//%1/swap}"
    echo -e "n\np\n\n\n+${swap_size}"M"\nt\n\n82\nw" | fdisk ${device}
    sleep 1
    showmessage "${txtautopartcreate//%1/root}"
    echo -e "n\np\n\n\n\nw" | fdisk ${device}
    sleep 1
    echo ""
    if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=${device}"p1"
        swapdev=${device}"p2"
        rootdev=${device}"p3"
    else
        bootdev=${device}"1"
        swapdev=${device}"2"
        rootdev=${device}"3"
    fi
    efimode="0"
}
# --------------------------------------------------------
diskpartautogpt(){
    showmessage "${txtautopartclear}"
    parted ${device} mklabel gpt
    showmessage "${txtautopartcreate//%1/BIOS boot}"
    sgdisk ${device} -n=1:0:+31M -t=1:ef02
    showmessage "${txtautopartcreate//%1/boot}"
    sgdisk ${device} -n=2:0:+512M
    showmessage "${txtautopartcreate//%1/swap}"
    sgdisk ${device} -n=3:0:+${swap_size}"M" -t=3:8200
    showmessage "${txtautopartcreate//%1/root}"
    sgdisk ${device} -n=4:0:0
    echo ""
    if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=${device}"p2"
        swapdev=${device}"p3"
        rootdev=${device}"p4"
    else
        bootdev=${device}"2"
        swapdev=${device}"3"
        rootdev=${device}"4"
    fi
    efimode="0"
}
# --------------------------------------------------------
diskpartautogptefi(){
    showmessage "${txtautopartclear}"
    parted ${device} mklabel gpt
    showmessage "${txtautopartcreate//%1/EFI boot}"
    sgdisk ${device} -n=1:0:+1024M -t=1:ef00
    showmessage "${txtautopartcreate//%1/swap}"
    sgdisk ${device} -n=2:0:+${swap_size}"M" -t=2:8200
    showmessage "${txtautopartcreate//%1/root}"
    sgdisk ${device} -n=3:0:0
    echo ""
    if [ "${device::8}" == "/dev/nvm" ]; then
        bootdev=${device}"p1"
        swapdev=${device}"p2"
        rootdev=${device}"p3"
    else
        bootdev=${device}"1"
        swapdev=${device}"2"
        rootdev=${device}"3"
    fi
    efimode="1"
}
# --------------------------------------------------------
formatdevice(){
    showtitle "FORMATTING PARTITIONS"
    if [ ! "${bootdev}" = "" ]; then
        formatbootdevice boot ${bootdev}
    fi
    if [ ! "${swapdev}" = "" ]; then
        formatswapdevice swap ${swapdev}
    fi
    formatrootdevice root ${rootdev}
    if [ ! "${homedev}" = "" ]; then
        formatrootdevice home ${homedev}
    fi
}
# --------------------------------------------------------
formatbootdevice(){
    options=""
    re='^[1-3]$'
    options+="[1] ext4\n"
    options+="[2] ext3\n"
    options+="[3] ext2\n"
    if [ "${efimode}" == "1" ]||[ "${efimode}" = "2" ]; then
        re='^[1-4]$'
        options+="[4] fat32 (EFI)\n"
    fi
    echo -e "${txtselectpartformat//%1/${1} (${2})}"
    echo -e "${options}"
    while true;do
        echo -e "Select one option: "
        read sel 
        if ! [[ $sel =~ $re ]] ; then
            showmessage "${txtinvalid}"
        else
            case ${sel} in
                "1")
                    formatboot="ext4"
                    ;;
                "2")
                    formatboot="ext3"
                    ;;
                "3")
                    formatboot="ext2"
                    ;;
                "4")
                    formatboot="fat32"
                    ;;
            esac
            echo ""
            break 
        fi
    done
    showmessage "${txtformatingpart//%1/${2}} ${formatboot}"
    showmessage "----------------------------------------------"
    case ${formatboot} in
        "ext2")
            showcommand "mkfs.ext2 ${2}"
            mkfs.ext2 ${2}
        ;;
        "ext3")
            showcommand "mkfs.ext3 ${2}"
            mkfs.ext3 ${2}
        ;;
        "ext4")
            showcommand "mkfs.ext4 ${2}"
            mkfs.ext4 ${2}
        ;;
        "fat32")
            fspkgs="${fspkgs[@]} dosfstools"
            showcommand "mkfs.fat ${2}"
            mkfs.fat ${2}
        ;;
    esac
}
# --------------------------------------------------------
formatswapdevice(){
    showmessage "${txtformatingpart//%1/${swapdev}} swap"
    showmessage "----------------------------------------------------"
    showcommand "mkswap ${swapdev}"
    mkswap ${swapdev}
    }
# --------------------------------------------------------
formatrootdevice(){
    re='^[1-8]$'
    options=""
    options+="[1] btrfs\n"
    options+="[2] ext4\n"
    options+="[3] ext3\n"
    options+="[4] ext2\n"
    options+="[5] xfs\n"
    options+="[6] f2fs\n"
    options+="[7] jfs\n"
    options+="[8] reiserfs\n"
    echo -e "${txtselectpartformat//%1/${1} (${2})}"
    echo -e "${options}"
    while true;do
        echo -e "Select one option: "
        read sel 
        if ! [[ $sel =~ $re ]] ; then
            showmessage "${txtinvalid}"
        else
            case ${sel} in
                "1")
                    formatroot="btrfs"
                    ;;
                "2")
                    formatroot="ext4"
                    ;;
                "3")
                    formatroot="ext3"
                    ;;
                "4")
                    formatroot="ext2"
                    ;;
                "5")
                    formatroot="xfs"
                    ;;
                "6")
                    formatroot="f2fs"
                    ;;
                "7")
                    formatroot="jfs"
                    ;;
                "8")
                    formatroot="reiserfs"
                    ;;
            esac
            echo ""
            break 
        fi
    done
    tput setaf 6
    showmessage "${txtformatingpart//%1/${2}} ${formatroot}"
    showmessage "----------------------------------------------"
    tput setaf 2
    case ${formatroot} in
        "btrfs")
            fspkgs="${fspkgs[@]} btrfs-progs"
            showcommand "mkfs.btrfs -f ${2}"
            mkfs.btrfs -f ${2}
            if [ "${1}" = "root" ]; then
                showcommand "mount ${2} /mnt"
                showcommand "btrfs subvolume create /mnt/root"
                showcommand "btrfs subvolume set-default /mnt/root"
                showcommand "umount /mnt"
                mount ${2} /mnt
                btrfs subvolume create /mnt/root
                btrfs subvolume set-default /mnt/root
                umount /mnt
            fi
        ;;
        "ext4")
            showcommand "mkfs.ext4 ${2}"
            mkfs.ext4 ${2}
        ;;
        "ext3")
            showcommand "mkfs.ext3 ${2}"
            mkfs.ext3 ${2}
        ;;
        "ext2")
            showcommand "mkfs.ext2 ${2}"
            mkfs.ext2 ${2}
        ;;
        "xfs")
            fspkgs="${fspkgs[@]} xfsprogs"
            showcommand "mkfs.xfs -f ${2}"
            mkfs.xfs -f ${2}
        ;;
        "f2fs")
            fspkgs="${fspkgs[@]} f2fs-tools"
            showcommand "mkfs.f2fs -f $2"
            mkfs.f2fs -f $2
        ;;
        "jfs")
            fspkgs="${fspkgs[@]} jfsutils"
            showcommand "mkfs.jfs -f ${2}"
            mkfs.jfs -f ${2}
        ;;
        "reiserfs")
            fspkgs="${fspkgs[@]} reiserfsprogs"
            showcommand "mkfs.reiserfs -f ${2}"
            mkfs.reiserfs -f ${2}
        ;;
    esac
}
# --------------------------------------------------------
mountparts(){
    showtitle "MOUNTING THE FILE SYSTEM"
    showcommand "mount ${rootdev} /mnt"
    mount ${rootdev} /mnt
    showcommand "mkdir /mnt/{boot,home}"
    mkdir /mnt/{boot,home} 2>/dev/null
    if [ ! "${bootdev}" = "" ]; then
        showcommand "mount ${bootdev} /mnt/boot"
        mount ${bootdev} /mnt/boot
    fi
    if [ ! "${swapdev}" = "" ]; then
        showcommand "swapon ${swapdev}"
        swapon ${swapdev}
    fi
    if [ ! "${homedev}" = "" ]; then
        showcommand "mount ${homedev} /mnt/home"
        mount ${homedev} /mnt/home
    fi
}
# --------------------------------------------------------
installmenu(){
    re='^[1-2]$'
    options=""
    showtitle "INSTALATION MENU"
    options+="[1] ${txteditmirrorlist}\n"
    options+="[2] ${txtinstallarchlinux}\n"
    echo -e "${textinstallmenu}"
    echo -e "${options}"
    while true;do
        echo -e "Select one option: "
        read sel 
        if ! [[ $sel =~ $re ]] ; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break 
        fi
    done
    case ${sel} in
        "1")
            #"${txteditmirrorlist}")
            ${editor} /etc/pacman.d/mirrorlist
            clear
        ;;
        "2")
            #"${txtinstallarchlinux}")
            installbase
	        installed=1
        ;;
    esac
    if [[ ${installed} != 0 ]]; then
        archmenu
    else
        installmenu
    fi
}
# --------------------------------------------------------
installbase(){
    re='^[1-4]$'
    pkgs="base"
    options=""
    options+="[1] linux\n"
    options+="[2] linux-lts\n"
    options+="[3] linux-zen\n"
    options+="[4] linux-hardened\n"

    showmessage "${txtinstallarchlinuxkernel}"
    echo -e "${options}"
    while true;do
        echo -e "Select one option: "
        read sel 
        if ! [[ $sel =~ $re ]] ; then
            showmessage "${txtinvalid}"
        else
            case ${sel} in
                "1")
                    pkgs+=" linux"
                    ;;
                "2")
                    pkgs+=" linux-lts"
                    ;;
                "3")
                    pkgs+=" linux-zen"
                    ;;
                "4")
                    pkgs+=" linux-hardened"
                    ;;
            esac
            echo ""
            break 
        fi
    done
    
    re='^[1]$'
    options=""
    options+="[1] linux-firmware\n"
    showmessage "${txtinstallarchlinuxfirmwares}"
    echo -e "${options}"
    while true;do
        echo -e "Select one option: "
        read sel 
        if ! [[ $sel =~ $re ]] ; then
            showmessage "${txtinvalid}"
        else
            case ${sel} in
                "1")
                    pkgs+=" linux-firmware"
                    ;;
            esac
            echo ""
            break 
        fi
    done

    options=""
    if [[ "${fspkgs}" == *"dosfstools"* ]]; then
        options+="[1] (*)dosfstools\n"
        pkgs+=" dosfstools"
    else
        options+="[1] ( )dosfstools\n"
    fi
    if [[ "${fspkgs}" == *"btrfs-progs"* ]]; then
        options+="[2] (*)btrfs-progs\n"
        pkgs+=" btrfs-progs"
    else
        options+="[2] ( )btrfs-progs\n"
    fi
    if [[ "${fspkgs}" == *"xfsprogs"* ]]; then
        options+="[3] (*)xfsprogs\n"
        pkgs+=" xfsprogs"
    else
        options+="[3] ( )xfsprogs\n"
    fi
    if [[ "${fspkgs}" == *"f2fs-tools"* ]]; then
        options+="[4] (*)f2fs-tools\n"
        pkgs+=" f2fs-tools"
    else
        options+="[4] ( )f2fs-tools\n"
    fi
    if [[ "${fspkgs}" == *"jfsutils"* ]]; then
        options+="[5] (*)jfsutils\n"
        pkgs+=" jfsutils"
    else
        options+="[5] ( )jfsutils\n"
    fi
    if [[ "${fspkgs}" == *"reiserfsprogs"* ]]; then
        options+="[6] (*)reiserfsprogs\n"
        pkgs+=" reiserfsprogs"
    else
        options+="[6] ( )reiserfsprogs\n"
    fi
    options+="[7] ( )lvm2\n"
    options+="[8] ( )dmraid\n"
    
    showmessage "${txtinstallarchlinuxfilesystems}"
    showmessage "Additionally, the following packages will be installed for the file system. If you want to add more you will have to install the packages manually"
    echo -e "${options}""\n"

    showcommand "pacstrap /mnt ${pkgs}"
    pacstrap /mnt ${pkgs}
    pressanykey
}
# --------------------------------------------------------
archmenu(){
    archsetkeymap
    archsetlocale
    archsettime
    hostname
    archsetrootpassword
    archadduser
    archgenfstabmenu
    if [ "${isnvme}" = "1" ]; then
        archgenmkinitcpionvme
    fi
    archextraspkg
    archbootloadermenu
    installdotfiles
    rebootpc
    exit
}
# --------------------------------------------------------
archchroot(){
    showcommand "arch-chroot /mnt /root"
    cp ${0} /mnt/root
    chmod 775 /mnt/root/$(basename "${0}")
    arch-chroot /mnt /root/$(basename "${0}") --chroot ${1} ${2}
    rm /mnt/root/$(basename "${0}")
    showmessage "exit"
}
# --------------------------------------------------------
hostname(){
    showtitle "SETTING HOSTNAME"
    echo "Enter a hostname, (archlinux as default): "
    read hostname
    if [ ! "${hostname}" = "none" ]; then
        hostname="archlinux"
    fi
    showmessage "${txtsethostname}"
    showcommand "echo \"${hostname}\" > /mnt/etc/hostname"
    showcommand "echo \"${txthost//%1/${hostname}}\" > /mnt/etc/hosts"
    echo "${hostname}" > /mnt/etc/hostname
    echo "${txthost//%1/${hostname}}" > /mnt/etc/hosts
    echo -e "\n"
}
# --------------------------------------------------------
archsetkeymap(){
    showtitle "SETTING KEYMAP"
    showcommand "echo \"${keymap}\" > /mnt/etc/vconsole.conf"
    echo "${keymap}" > /mnt/etc/vconsole.conf
}
# --------------------------------------------------------
archsetlocale(){
    showtitle "SETTING LOCALE"
    showmessage "${txtsetlocale}"
    showcommand "echo -e ${locales//%1/${locale}} > /mnt/etc/locale.conf"
    echo -e ${locales//%1/${locale}} > /mnt/etc/locale.conf
    showcommand "sed -i \"/#${locale}.UTF-8/s/^#//g\" /mnt/etc/locale.gen"
    sed -i "/#${locale}.UTF-8/s/^#//g" /mnt/etc/locale.gen
    archchroot setlocale
}
# --------------------------------------------------------
archsetlocalechroot(){
    showcommand "locale-gen"
    locale-gen
    exit
}
# --------------------------------------------------------
archsettime(){
    showtitle "SETTING TIME"
    re="^[1-2]$"
    options=""
    options+="[1] UTC\n"
    options+="[2] LOCAL\n"

    showmessage "${txtsettime}"
    showcommand "ln -sf /mnt/usr/share/zoneinfo/${timezone} /mnt/etc/localtime"
    ln -sf /mnt/usr/share/zoneinfo/${timezone} /mnt/etc/localtime
    
    echo -e "\n${txthwclock}"
    echo -e "${options}"
    while true;do
        echo "Select a option: "
        read sel 
	    if ! [[ ${sel} =~ ${re} ]]; then
            showmessage "${txtinvalid}"
    	else
		    echo ""
    		break
	    fi
    done
    case ${sel} in
        "1")
            archchroot settimeutc
        ;;
        "2")
            archchroot settimelocal
        ;;
    esac
}
# --------------------------------------------------------
archsettimeutcchroot(){
    showcommand "hwclock --systohc --utc"
    showcommand "timedatectl set-timezone $timezone"
    showcommand "timedatectl set-ntp 0"
    showcommand "timedatectl set-local-rtc 0 --adjust-system-clock"
    hwclock --systohc --utc
    timedatectl set-timezone $timezone
    timedatectl set-ntp 0
    timedatectl set-local-rtc 0 --adjust-system-clock
    exit
}
# --------------------------------------------------------
archsettimelocalchroot(){
    showcommand "hwclock --systohc --localtime"
    showcommand "timedatectl set-timezone $timezone"
    showcommand "timedatectl set-ntp 1"
    showcommand "timedatectl set-local-rtc 1 --adjust-system-clock"
    hwclock --systohc --localtime
    timedatectl set-timezone $timezone
    timedatectl set-ntp 1
    timedatectl set-local-rtc 1 --adjust-system-clock
    exit
}
# --------------------------------------------------------
archsetrootpassword(){
    showtitle "SETTING ROOT PASSWORD"
    archchroot setrootpassword
}
# --------------------------------------------------------
archsetrootpasswordchroot(){
    showcommand "passwd root"
    passed=1
    while [[ ${passed} != 0 ]]; do
	    passwd root
	    passed=$?
    done
    exit
}
# --------------------------------------------------------
archadduser(){
    countusers=$(awk -F: '{if ($3 >= 1000 && $3 <= 5000) { print $1 } }' /etc/passwd | wc -l)
    i=1
    while true;do
        archchroot adduser
        options=""
        users=$(awk -F: '{if ($3 >= 1000 && $3 <= 5000) { print $1 } }' /mnt/etc/passwd)
        for user in ${users}; do
            options+="[$i] $user\n"
            i=$((i+1))
        done
        if [ ${i} -gt 1 ]; then
            break
        else
            showmessage "you need at least one user created"
            sleep 5
        fi
    done
}
# --------------------------------------------------------
archadduserchroot(){
    re="^[1-2]$"
    re2=""
    passed=1
    showtitle "${titleusers}"
    
    options=""
    options+="[1] Yes\n"
    options+="[2] No\n"

    showmessage "${txtmsguser}"
    echo -e "${options}"
	
    while true; do
        echo "Select a option: "
        read sel
        if ! [[ $sel =~ $re ]]; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break
        fi
    done
    if [[ $sel == 1 ]]; then
        while true;do
            echo -e "Please enter a new username:"
            read username
            if ! [[ $username =~ $re2 ]]; then
                showmessage "${txtinvalidusername}"
            else
                echo ""
                break
            fi
        done
        showcommand "useradd -d /home/$username -s /bin/bash -m -N $username"
        useradd -d /home/$username -s /bin/bash -m -N $username
        showmessage "User $username created."
        showmessage "Choose a password for $username :"
        showcommand "passwd $username"
        while [[ ${passed} != 0 ]]; do
            passwd $username
    	    passed=$?
        done
        grpck
        echo ""

        showmessage "${txtmsgsudouser}"
        echo -e "${options}"
	    
        while true; do
            echo "Select a option: "
            read sel
            if ! [[ $sel =~ $re ]]; then
                showmessage "${txtinvalid}"
            else
                echo ""
                break
            fi
        done
        if [[ $sel == 1 ]]; then
            showcommand "pacman -Sy --noconfirm sudo"
            pacman -Sy --noconfirm sudo
            showcommand "echo \"$username ALL=(ALL) ALL\" > /etc/sudoers.d/$username"
            echo "$username ALL=(ALL) ALL" > /etc/sudoers.d/$username
        fi
    fi
    exit
}
# --------------------------------------------------------
archgenfstabmenu(){
    re="^[1-4]$"
    options=""
    options+="[1] \"UUID\" genfstab -U\n"
    options+="[2] \"LABEL\" genfstab -L\n"
    options+="[3] \"PARTUUID\" genfstab -t PARTUUID\n"
    options+="[4] \"PARTLABEL\" genfstab -t PARTLABEL\n"
    showtitle "${txtgenerate//%1/fstab}"
    
    showmessage "${txtgenerate//%1/fstab}"
    echo -e "${options}"
    while true; do
        echo "Select a option: "
        read sel
        if ! [[ $sel =~ $re ]]; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break
        fi
    done
    case ${sel} in
        "1")
            #"UUID")
            showcommand "genfstab -U -p /mnt > /mnt/etc/fstab"
            genfstab -U -p /mnt > /mnt/etc/fstab
        ;;
        "2")
            #"LABEL")
            showcommand "genfstab -L -p /mnt > /mnt/etc/fstab"
            genfstab -L -p /mnt > /mnt/etc/fstab
        ;;
        "3")
            #"PARTUUID")
            showcommand "genfstab -t PARTUUID -p /mnt > /mnt/etc/fstab"
            genfstab -t PARTUUID -p /mnt > /mnt/etc/fstab
        ;;
        "4")
            #"PARTLABEL")
            showcommand "genfstab -t PARTLABEL -p /mnt > /mnt/etc/fstab"
            genfstab -t PARTLABEL -p /mnt > /mnt/etc/fstab
        ;;
    esac
}
# --------------------------------------------------------
archgencrypttab(){
    showtitle "${txtgenerate//%1/crypttab}"
    showcommand "echo -e \"${crypttab}\" >> /mnt/etc/crypttab"
    echo -e "${crypttab}" >> /mnt/etc/crypttab
}
# --------------------------------------------------------
archgenmkinitcpionvme(){
    showtitle "${txtgenerate//%1/MkinitcpioNVME}"
    showcommand "sed -i \"s/MODULES=()/MODULES=(nvme)/g\" /mnt/etc/mkinitcpio.conf"
    sed -i "s/MODULES=()/MODULES=(nvme)/g" /mnt/etc/mkinitcpio.conf
    archchroot genmkinitcpio
}
# --------------------------------------------------------
archbootloadermenu(){
    re="^[1-4]$"
    options=""
    options+="[1] ${txtinstall//%1/grub}\n"
    options+="[2] ${txtedit//%1/grub}\n"
    options+="[3] ${txtinstall//%1/bootloader}\n"
    options+="[4] Continue\n"
    showtitle "INSTALLING BOOTLOADER"

    showmessage "${txtbootloadergrubmenu}"
    echo -e "${options}"
    while true; do
        echo "Select a option: "
        read sel
        if ! [[ $sel =~ $re ]]; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break
        fi
    done
    case ${sel} in
        "1")
            #"${txtinstall//%1/grub}")
            archgrubinstall
            clear
        ;;
        "2")
            #"${txtedit//%1/grub}")
            ${editor} /mnt/etc/default/grub
            clear
            archchroot grubinstall
        ;;
        "3")
            #"${txtinstall//%1/bootloader}")
            archgrubinstallbootloader
        ;;
        "4")
            #"Continue")
        ;;
    esac
    if ! [[ ${sel} = 4 ]]; then
        archbootloadermenu
    fi
}
# --------------------------------------------------------
archgrubinstall(){
    clear
    showcommand "pacstrap /mnt grub os-prober"
    pacstrap /mnt grub os-prober
    pressanykey

    if [ "${eficomputer}" == "1" ]; then
        if [ "${efimode}" == "1" ]||[ "${efimode}" == "2" ]; then
            clear
            showcommand "pacstrap /mnt efibootmgr"
            pacstrap /mnt efibootmgr
            pressanykey
        else
            clear
            showcommand "pacstrap /mnt efibootmgr"
            pacstrap /mnt efibootmgr
            pressanykey
        fi
    fi
    clear
    archchroot grubinstall
}
# --------------------------------------------------------
archgrubinstallchroot(){
     showcommand "mkdir /boot/grub"
     showcommand "os-prober"
     showcommand "grub-mkconfig -o /boot/grub/grub.cfg"
     mkdir /boot/grub
     os-prober
     grub-mkconfig -o /boot/grub/grub.cfg
     exit
}
# --------------------------------------------------------
archgrubinstallbootloader(){
    clear
    selectdisk "${title_device}" "${txtinstall//%1/bootloader}"
    device_bootloader="${sel_device}"

    re="^[1-3]$"
    if [ "${eficomputer}" == "1" ]; then
        options=""
        if [ "${efimode}" == "1" ]; then
            options+="[1] EFI\n"
            options+="[2] BIOS\n"
            options+="[3] BIOS+EFI\n"
        elif [ "${efimode}" == "2" ]; then
            options+="[1] BIOS+EFI\n"
            options+="[2] BIOS\n"
            options+="[3] EFI\n"
        else
            options+="[1] BIOS\n"
            options+="[2] EFI\n"
            options+="[3] BIOS+EFI\n"
        fi
        
        echo "${txtinstall//%1/bootloader}\n"
        echo -e "${options}"
        while true;do
            echo "Select a option: "
            read sel
            if ! [[ $sel =~ $re ]]; then
                showmessage "${txtinvalid}"
            else
                if [ "${efimode}" == "1" ]; then
                    case ${sel} in
                        "1")
                            bootloader="EFI"
                        ;;
                        "2")
                            bootloader="BIOS"
                        ;;
                        "3")
                            bootloader="BIOS+EFI"
                        ;;
                    esac
                elif [ "${efimode}" == "2" ]; then
                    case ${sel} in
                        "1")
                            bootloader="BIOS+EFI"
                        ;;
                        "2")
                            bootloader="BIOS"
                        ;;
                        "3")
                            bootloader="EFI"
                        ;;
                    esac
                else
                    case ${sel} in
                        "1")
                            bootloader="BIOS"
                        ;;
                        "2")
                            bootloader="EFI"
                        ;;
                        "3")
                            bootloader="BIOS+EFI"
                        ;;
                    esac
                fi
                echo ""
                break
            fi
        done
        case ${bootloader} in
            "BIOS")
                archchroot grubbootloaderinstall ${device_bootloader}
            ;;
            "EFI")
                archchroot grubbootloaderefiinstall ${device_bootloader}
            ;;
            "BIOS+EFI")
                archchroot grubbootloaderefiusbinstall ${device_bootloader}
            ;;
        esac
    else
        clear
        archchroot grubbootloaderinstall ${device_bootloader}
        pressanykey
    fi
    clear
}
# --------------------------------------------------------
archgrubinstallbootloaderchroot(){
    if [ ! "${1}" = "none" ]; then
        showcommand "grub-install --target=i386-pc --recheck ${1}"
        grub-install --target=i386-pc --recheck ${1}
    fi
    exit
}
# --------------------------------------------------------
archgrubinstallbootloaderefichroot(){
    if [ ! "${1}" = "none" ]; then
        showcommand "grub-install --target=x86_64-efi --efi-directory=/boot --recheck ${1}"
        grub-install --target=x86_64-efi --efi-directory=/boot --recheck ${1}
        isvbox=$(lspci | grep "VirtualBox G")
        if [ "${isvbox}" ]; then
            echo "VirtualBox detected, creating startup.nsh..."
            showcommand "\"\EFI\arch\grubx64.efi\" > /boot/startup.nsh"
            echo "\EFI\arch\grubx64.efi" > /boot/startup.nsh
        fi
    fi
    exit
}
# --------------------------------------------------------
archgrubinstallbootloaderefiusbchroot(){
    if [ ! "${1}" = "none" ]; then
        showcommand "grub-install --target=i386-pc --recheck ${1}"
        grub-install --target=i386-pc --recheck ${1}
        showcommand "grub-install --target=x86_64-efi --efi-directory=/boot --recheck ${1}"
        grub-install --target=x86_64-efi --efi-directory=/boot --recheck ${1}
        isvbox=$(lspci | grep "VirtualBox G")
        if [ "${isvbox}" ]; then
            echo "VirtualBox detected, creating startup.nsh..."
            showcommand "\"\EFI\arch\grubx64.efi\" > /boot/startup.nsh"
            echo "\EFI\arch\grubx64.efi" > /boot/startup.nsh
        fi
    fi
    exit
}
# --------------------------------------------------------
archextraspkg(){
    showtitle "INSTALLING EXTRAS PACKAGES"
    pkgs=""
    pkgs+="nano "
    pkgs+="vim "
    pkgs+="dhcpcd "

    showcommand "pacstrap /mnt ${pkgs}"
    pacstrap /mnt ${pkgs}
    archchroot enabledhcpcd
}
# --------------------------------------------------------
archenabledhcpcdchroot(){
    showcommand "systemctl enable dhcpcd"
    systemctl enable dhcpcd
    exit
}
# --------------------------------------------------------
installdotfiles(){
    options=""
    options+="[1] Yes\n"
    options+="[2] No\n"
    if [ $workflow = true ]; then
    	archchroot dotfilesinstall --workflow
    else
        showmessage "${txtdotfiles}"
        echo -e "${options}"
	
        while true; do
            echo "Select a option: "
            read sel
            if ! [[ $sel =~ $re ]]; then
                showmessage "${txtinvalid}"
            else
                echo ""
                break
            fi
        done
        if [[ $sel == 1 ]]; then
    		archchroot dotfilesinstall
        fi
    fi
}
# --------------------------------------------------------
installdotfilesdownload(){
	showcommand "curl -L ${installconfigurationurl} >installdotfiles"
    curl -L ${installconfigurationurl} >installdotfiles
}
# --------------------------------------------------------
installdotfileslaunchchroot(){
	cd
	installdotfilesdownload
    if [ $workflow = true ]; then
    	sh installdotfiles --chroot --workflow
    else
    	sh installdotfiles --chroot
    fi
	rm installdotfiles
	exit
}
# --------------------------------------------------------
rebootpc(){
    showtitle "REBOOTING PC"
    re="^[1-2]"
    options=""
    options+="[1] Yes\n"
    options+="[2] No\n"

    showmessage "Installation is complete. Do you want to reboot?"
    echo -e "${options}"
    while true; do
        echo "Select a option: "
        read sel
        if ! [[ $sel =~ $re ]]; then
            showmessage "${txtinvalid}"
        else
            echo ""
            break
        fi
    done
    unmountdevices
    if [[ $sel == 1 ]]; then
        showcommand "reboot now"
        reboot now
    fi
}
# --------------------------------------------------------
unmountdevices(){
    showmessage "Unmounting devices"
    showcommand "umount -R /mnt"
    umount -R /mnt
    if [ ! "${swapdev}" = "" ]; then
        showcommand "swapoff ${swapdev}"
        swapoff ${swapdev}
    fi
}
# --------------------------------------------------------
pressanykey(){
    tput setaf 3
	read -n1 -p "${txtpressanykey}"
	echo ""
	tput sgr0
}
showcommand(){
    tput setaf 2
    if [ ! "${1}" = "none" ]; then
        echo -e "${txtcommand//%1/${1}}"
        echo ""
    fi
    tput sgr0
}
showmessage(){
    tput setaf 6
    if [ ! "${1}" = "none" ]; then
        echo -e "${txtmessage//%1/${1}}"
        echo ""
    fi
    tput sgr0
}
showtitle(){
    tput setaf 5
    if [ ! "${1}" = "none" ]; then
    echo ""
    echo "##############################################"
    echo "${1}"
    echo "##############################################"
    echo ""
    fi
    tput sgr0
}
# --------------------------------------------------------
loadconfigs(){
    # init variables ---------------------------------
    fspkgs=""

    # efi variables ----------------------------------
    eficomputer=""
    efimode=""

    # keymap -----------------------------------------
    keymap="us"
    title_keymap="Loading Keymap"
    menu_keymap="loadkeys ${keymap}"

    # editor -----------------------------------------
    editor="vim"
    title_editor="Setting Editor"
    menu_editor="export EDITOR=${editor}"

    # hard disk --------------------------------------
    device=""
    title_device="Choose your hard drive"
    menu_device="Where do you want to install your new system?\n\nWARNING: Everything will be DESTROYED on the hard disk!"

    #Swap --------------------------------------------
    default_swapsize=$(cat /proc/meminfo | grep MemTotal | awk '{ print $2 }')
    default_swapsize=$((${default_swapsize}/1000))
    title_swap="Choose your swap size"
    txt_swap="The boot will be 512M\nThe root will be the rest of the hard disk\nEnter partitionsize in gb for the Swap. \n\nIf you don't enter anything: \nswap -> Same size of the ram installed"
    menu_swap="Enter the size of swap partition in MB (only numbers)"

    # diskpart ---------------------------------------
    bootdev=""
    swapdev=""
    rootdev=""
    isnvme=0
    txt_diskpart="Now you must select the type of partition for your device\n"
    txtautopartclear="Clear all partition data"
    txtautopartcreate="Create %1 partition"
    txthybridpartcreate="Set hybrid MBR"
    
    # format partition -------------------------------
    txtselectpartformat="Select partition format for %1 :"
    txtformatingpart="Formatting partition %1 as"

    # installation menu ------------------------------
    txteditmirrorlist="Edit mirrorlist"
    txtinstallarchlinux="Install Arch Linux"

    # install base -----------------------------------
    installed=0
    txtinstallarchlinuxkernel="Kernel"
    txtinstallarchlinuxfirmwares="Firmwares"
    txtinstallarchlinuxfilesystems="File Systems"
    
    # hostname ---------------------------------------
    hostname=""
    txtsethostname="Set Computer Name"
    txthost="127.0.0.1    localhost\n::1          localhost\n127.0.1.1    %1.localdomain    %1"
   
    # locale -----------------------------------------
    locale="es_CO"
    locales="LANG=%1.UTF-8\nLANGUAGE=%1:en\nLC_CTYPE=\"%1.UTF-8\"\nLC_NUMERIC=%1.UTF-8\nLC_TIME=%1.UTF-8\nLC_COLLATE=%1.UTF-8\nLC_MONETARY=%1.UTF-8\nLC_MESSAGES=\"%1.UTF-8\"\nLC_PAPER=\"%1.UTF-8\"\nLC_NAME=\"%1.UTF-8\"\nLC_ADDRESS=\"%1.UTF-8\"\nLC_TELEPHONE=\"%1.UTF-8\"\nLC_MEASUREMENT=%1.UTF-8\nLC_IDENTIFICATION=\"%1.UTF-8\"\nLC_ALL="
    txtsetlocale="Set Locale"

    # set time ---------------------------------------
    timezone="America/Bogota"
    txtsettime="Set Time"
    txthwclock="Hardware clock: "
    txthwclockutc="UTC"
    txthwclocklocal="Local"

    # rootpassword -----------------------------------
    txtsetrootpassword="Set root password"

    # users -----------------------------------------
    titleusers="USERS MENU"
    txtmsguser="Do you want add a new user?"
    txtmsgsudouser="Do you want add the last user create to sudo group?"
    txtuser="%1 User"
    txtusers="%1 Users"
    txtinvalidusername="Invalid username, try again."

    # bootloader -------------------------------------
    txtbootloadergrubmenu="Choose your bootloader"

    # dotfiles ---------------------------------------
    txtdotfiles="Do you want to install the configuration?"
    installconfigurationurl=https://raw.githubusercontent.com/GiomarOsorio/dotfiles/new-features/install_configuration

    # messages ---------------------------------------
    txtnextscreen="Select the installation %1 on the next screen"	
    txtpressanykey="Press any key to continue..."
    txtgenerate="Generate %1"
    txtinstall="Install %1"
    txtedit="Edit %1"
    txtcommand="> %1"
    txtmessage="%1"
    txtinvalid="Invalid option, try again."
}

# --------------------------------------------------------
workflow=false
while (( "$#" )); do
    case ${1} in
        -efi0)
            efimode=0
        ;;
        -efi1)
            eficomputer=1
            efimode=1
        ;;
        -efi2)
            eficomputer=1
            efimode=2
        ;;
        --chroot)
            loadconfigs
            chroot=1
            command=${2}
            args=${3}
        ;;
        --workflow)
            workflow=true
        ;;
    esac
    shift
done

if [ "${chroot}" = "1" ]; then
    case ${command} in
        'setrootpassword') archsetrootpasswordchroot;;
        'adduser') archadduserchroot;;
        'setlocale') archsetlocalechroot;;
        'settimeutc') archsettimeutcchroot;;
        'settimelocal') archsettimelocalchroot;;
        'genmkinitcpio') archgenmkinitcpiochroot;;
        'enabledhcpcd') archenabledhcpcdchroot;;
        'grubinstall') archgrubinstallchroot;;
        'grubbootloaderinstall') archgrubinstallbootloaderchroot ${args};;
        'grubbootloaderefiinstall') archgrubinstallbootloaderefichroot ${args};;
        'grubbootloaderefiusbinstall') archgrubinstallbootloaderefiusbchroot ${args};;
	'dotfilesinstall') installdotfileslaunchchroot;;
    esac
else
    run
fi
